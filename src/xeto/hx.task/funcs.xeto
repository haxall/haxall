//
// Copyright (c) 2025, SkyFoundry LLC
// Licensed under the Academic Free License version 3.0
//
// History:
//   18 Jul 2025  Brian Frank  Creation
//

// Lookup a task by id which is any value supported by `toRecId()`.
task: Func <admin> { id: Obj?, checked: Bool, returns: Dict? }

// List the current tasks as a grid.
// The format of this grid is subject to change.
tasks: Func <admin> { opts: Dict?, returns: Grid }

// Is the current context running asynchrounsly inside a task
taskIsRunning: Func <admin> { returns: Bool }

// Return current task if running within the context of an asynchronous
// task.  If context is not within a task, then return null or raise
// an exception based on checked flag.
taskCur: Func <admin> { checked: Bool, returns: Dict? }

// Run the given expression asynchronously in an ephemeral task.
// Return a future to track the asynchronous result.  Note the
// expr passed cannot use any variables from the current scope.
// See `lib-task::doc#ephemeralTasks`.
taskRun: Func <admin> { expr: Obj?, msg: Dict?, returns: Future }

// Restart a task.  This kills the tasks and discards any
// pending messages in its queue.  See `lib-task::doc#lifecycle`.
taskRestart: Func <admin> { task: Obj, returns: Dict }

// Set cancel flag for the given task.  Cancelling a task sets an
// internal flag which is checked by the context's heartbeat on every
// Axon call.  On the next Axon call the current message context
// will raise a `sys::CancelledErr` which will be raised by the respective
// future.  Cancelling a task does **not** interrupt any current operations,
// so any blocking future or I/O calls should always use a timeout.
taskCancel: Func <admin> { task: Obj, returns: Obj? }

// Update the current running task's progress data with given dict.
// This is a silent no-op if the current context is not running in a task.
//
// Example:
//    // report progress percentage processing a list of records
//    recs.each((rec, index)=>do
//      taskProgress({percent: round(100%*index/recs.size), cur:rec.dis})
//      processRec(rec)
//    end)
//    taskProgress({percent:100%})
taskProgress: Func <admin> { progress: Obj?, returns: Obj? }

// Given a list of one or more tasks, return the next task to use
// to perform load balanced work.  The current algorithm returns
// the task with the lowest number of messages in its queue.
taskBalance: Func <nodoc, admin> { tasks: Obj, returns: Dict }

// Asynchronously send a message to the given task for processing.
// Return a future to track the asynchronous result.
// See `lib-task::doc#messaging`.
taskSend: Func <admin> { task: Obj, msg: Obj?, returns: Future }

// Schedule a message for delivery after the specified period of
// duration has elapsed.  Once the period has elapsed the message is
// appended to the end of the task's queue.  Return a future to
// track the asynchronous result.  See `lib-task::doc#messaging`.
taskSendLater: Func <admin> { task: Obj, dur: Number, msg: Obj?, returns: Future }

// Schedule a message for delivery after the given future has completed.
// Completion may be due to the future returning a result, throwing an
// exception, or cancellation.  Return a future to track the asynchronous
// result.  See `lib-task::doc#messaging`.
taskSendWhenComplete: Func <admin> { task: Obj, future: Future, msg: Obj?, returns: Future }

// Get a task local variable by name or def if not defined.
// Must be running in a task context.  See `lib-task::doc#locals`.
taskLocalGet: Func <admin> { name: Str, def: Obj?, returns: Obj? }

// Set a task local variable. The name must be a valid tag name. Must
// be running in a task context.  See `lib-task::doc#locals`.
taskLocalSet: Func <admin> { name: Str, val: Obj?, returns: Obj? }

// Remove a task local variable by name. Must be running in a task
// context.  See `lib-task::doc#locals`.
taskLocalRemove: Func <admin> { name: Str, returns: Obj? }

// Block current thread until a future's result is ready.  A null
// timeout will block forever.  If an exception was raised by the
// asynchronous computation, then it is raised to the caller.
// See `lib-task::doc#futures`.
futureGet: Func <admin> { future: Future, timeout: Number?, returns: Obj? }

// Cancel a future.  If the message is still queued then its
// removed from the actor's queue and will not be processed.
// No guarantee is made that the message will not be processed.
// See `lib-task::doc#futures`.
futureCancel: Func <admin> { future: Future, returns: Obj? }

// Return current state of a future as one of the following strings:
//  - 'pending': still queued or being processed
//  - 'ok': completed with result value
//  - 'err': completed with an exception
//  - 'cancelled': future was cancelled before processing
// See `lib-task::doc#futures`.
futureState: Func <admin> { future: Future, returns: Str }

// Return if a future has completed or is still pending a result.
// A future is completed by any of the following conditions:
//   - the task processes the message and returns a result
//   - the task processes the message and raises an exception
//   - the future is cancelled
// See `lib-task::doc#futures`.
futureIsComplete: Func <admin> { future: Future, returns: Bool }

// Block until a future transitions to a completed state (ok,
// err, or canceled).  If timeout is null then block forever,
// otherwise raise a TimeoutErr if timeout elapses.  Return future.
// See `lib-task::doc#futures`.
futureWaitFor: Func <admin> { future: Future, timeout: Number?, returns: Future }

// Block on a list of futures until they all transition to a completed
// state.  If timeout is null block forever, otherwise raise TimeoutErr
// if any one of the futures does not complete before the timeout elapses.
// See `lib-task::doc#futures`.
futureWaitForAll: Func <admin> { futures: List, timeout: Number?, returns: List }

// Sleep for the given duration.  If not currently running in
// a task this is a no-op.  This will block the current task's thread
// and prevent other tasks from using it until the sleep completes.
// So this function should be used sparingly and with care.
taskSleep: Func <admin> { dur: Number, returns: Obj? }

// Send empty message to tasks
taskRunAction: Func <nodoc, admin> { taskIds: Obj, returns: Obj? }

// Implementation for taskSendAction Axon wrapper
taskCancelAction: Func <nodoc, admin> { taskIds: Obj, returns: Obj? }

// Implementation for taskSendAction Axon wrapper
taskDoSendAction: Func <nodoc, admin> { taskIds: Obj, msg: Str, returns: Obj? }

// Return plaintext grid for task's debug details
taskDebugDetails: Func <nodoc, admin> { task: Obj, returns: Grid }

// Return plaintext grid for pool debug
taskDebugPool: Func <nodoc, admin> { returns: Grid }

// Refresh the user account used for tasks
taskRefreshUser: Func <admin> { returns: Obj? }

// White-box testing for adjunct
taskTestAdjunct: Func <nodoc> { returns: Number }

