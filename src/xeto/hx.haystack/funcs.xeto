//
// Copyright (c) 2025, SkyFoundry LLC
// Licensed under the Academic Free License version 3.0
//
// History:
//   22 Jul 2025  Brian Frank  Garden City Beach
//

// Deprecated - use `connPing()`
haystackPing: Func <admin, deprecated> { conn: Obj, returns: Future }

// Deprecated - use `connLearn()`
haystackLearn: Func <admin, deprecated> { conn: Obj, arg: Obj?, returns: Grid }

// Deprecated - use `connSyncCur()`
haystackSyncCur: Func <admin, deprecated> { points: Obj, returns: List }

// Deprecated - use `connSyncHis()`
haystackSyncHis: Func <admin, deprecated> { points: Obj, span: Obj?, returns: Obj? }

// Perform Haystack HTTP API call to given Str op name and with
// given request grid (can be anything acceptable `toGrid`).  If
// the checked flag is true and server returns an error grid, then
// raise `haystack::CallErr`, otherwise return the grid itself.
// Result is returned as Grid.  Also see `haystack::Client.call`.
haystackCall: Func <admin> { conn: Obj, op: Str, req: Obj?, checked: Bool, returns: Grid }

// Perform Haystack HTTP API call to read a record by its unique
// identifier.  Return result as dict.  If the record is not found, then
// return null or raise UnknownRecErr based on checked flag.  Also
// see `haystack::Client.readById`.
haystackReadById: Func <admin> { conn: Obj, id: Obj, checked: Bool, returns: Dict? }

// Perform Haystack HTTP API call to read a list of records by their
// identifiers.  Return a grid where each row of the grid maps to the
// respective id list (indexes line up).  If checked is true and any one
// of the ids cannot be resolved then raise UnknownRecErr for first id not
// resolved.  If checked is false, then each id not found has a row
// where every cell is null.  Also see `haystack::Client.readByIds`.
haystackReadByIds: Func <admin> { conn: Obj, ids: List, checked: Bool, returns: Grid }

// Perform Haystack REST API call to read single entity with filter.
// The filter is an expression like `readAll`.  Return result as dict.
// If the record is not found, then return null or raise UnknownRecErr
// based on checked flag.  Also see `haystack::Client.read`.
haystackRead: Func <admin> { conn: Obj, filter: Filter, checked: Bool, returns: Dict? }

// Perform Haystack REST API call to read all entities with filter.
// The filter is an expression like `readAll`.  Return results
// as grid.  Also see `haystack::Client.readAll`.
haystackReadAll: Func <admin> { conn: Obj, filter: Filter, returns: Grid }

// Perform Haystack REST API "hisRead" call to read history
// data for the record identified by the id (must be Ref).
// The range is any string encoding supported by the REST API
// or any value supported by `toDateSpan`.  Return results
// as grid with "ts" and "val" column.
haystackHisRead: Func <admin> { conn: Obj, id: Obj, range: Obj?, returns: Grid }

// Invoke a remote action on the given Haystack connector
// and remote entity.  The id must be a Ref of the remote entity's
// identifier and action is a Str action name.  If args are
// specified, then they should be a Dict keyed by parameter
// name.
haystackInvokeAction: Func <admin> { conn: Obj, id: Obj, action: Str, args: Dict?, returns: Obj? }

// Evaluate an Axon expression in a remote server over
// a haystack connector.  The remote server must be a SkySpark
// server which supports the "eval" REST op with an Axon
// expression.  This function blocks while the network request is
// made.  The result is always returned as a Grid using the same
// rules as `haystack::Etc.toGrid`.
//
// The expression to evaluate in the remote server may capture
// variables from the local scope.  If these variables are atomic types,
// then they are captured as defined by local scope and serialized
// to the remote server.  Pass '{debug}' for opts to dump to stdout
// the actual expr with serialized scope.
//
// Options:
//   - 'debug': dumps full expr with seralized scope to stdout
//   - 'evalTimeout': duration number to override remote project's
//     default [evalTimeout]`docSkySpark::Tuning#folio`
//
// Examples:
//   read(haystackConn).haystackEval(3 + 4)
//   read(haystackConn).haystackEval(readAll(site))
//   read(haystackConn).haystackEval(readAll(kw).hisRead(yesterday))
haystackEval: Func <admin> { conn: Obj, expr: Obj?, opts: Dict?, returns: Obj? }

