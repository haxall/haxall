//
// Copyright (c) 2025, SkyFoundry LLC
// Licensed under the Academic Free License version 3.0
//
// History:
//   28 Sep 2025  Brian Frank  Creation
//

//////////////////////////////////////////////////////////////////////////
// Bind
//////////////////////////////////////////////////////////////////////////

testTemplateBindA: Template {
  s: Str

  returns: TestFolder {
    dis: "Test"
    foo
    x: Bind <var:"s">
    y: Number 123
  }
}

testTemplateBindB: Template {
  data: Dict

  returns: Dict {
    a:  Bind <var:"data.a">
    b:  Bind <var:"data.b">
    c:  Bind <var:"data.c.nest">
    d:  Bind <var:"data.d">
    e:  Bind <var:"data.e">
    en: Bind <var:"data.e.nest">
  }
}

testTemplateBindC: Template {
  x: Str
  returns: TestFolder {
    nest: TemplateDictC {
      a: Bind <var:"x">
      e: Bind <var:"x">
    }
  }
}

TemplateDictC: {
  a: Str
  b: Str
  c: Str "def-c"
  e: Str?
  f: Str?
}

testTemplateBindD: Template {
  n: Number
  s: Str
  returns: Dict {
    a: Bind <axon:"n + 100">
    b: Bind <axon:"s.upper">
  }
}

//////////////////////////////////////////////////////////////////////////
// If
//////////////////////////////////////////////////////////////////////////

testTemplateIfA: Template {
  cond: Bool

  returns: Dict {
    If <var:"cond"> {
      dis: "cond is true"
    }
  }
}

testTemplateIfB: Template {
  cond: Bool

  returns: Dict {
    If <var:"cond"> {
      dis: "cond is true"
      yea
    }
    Else {
      dis: "cond is false"
      nay
    }
  }
}

testTemplateIfC: Template {
  cond1: Bool
  cond2: Bool

  returns: Dict {
    If <var:"cond1"> {
      dis1: "true"
    }
    Else {
      dis1: "false"
    }
    If <var:"cond2"> {
      dis2: "true"
    }
  }
}

testTemplateIfD: Template {
  in: Number

  returns: Dict {
    If <axon:"in > 100"> {
      dis: "greater than 100"
    }
    Else {
      dis: "less than 100"
    }
  }
}

//////////////////////////////////////////////////////////////////////////
// Switch
//////////////////////////////////////////////////////////////////////////

testTemplateSwitchA: Template {
  cond: Str

  returns: Dict {
    Switch <var:"cond"> {
      Case <match:"a"> {
        dis:"case a"
        alpha
      }
      Case <match:"b"> {
        dis:"case b"
        beta
      }
      Else {
        dis:"case default"
      }
    }
  }
}

testTemplateSwitchB: Template {
  cond: Str

  returns: Dict {
    Switch <axon:"cond.upper"> {
      Case <match:"ALPHA"> {
        dis:"case a"
        alpha
      }
      Case <match:"BETA"> {
        dis:"case b"
        beta
      }
      Else {
        dis:"case default"
      }
    }
  }
}

testTemplateSwitchC: Template {
  num: Number
  limit: Number

  returns: Dict {
    Switch <var:"num"> {
      Case <axon:"num.isOdd"> {
        dis:"odd"
      }
      Case <axon:"num < limit"> {
        dis: Bind <axon:"\"less than \" + limit">
      }
      Else {
        dis: Bind <axon:"\"else >= \" + limit">
      }
    }
  }
}

//////////////////////////////////////////////////////////////////////////
// Foreach
//////////////////////////////////////////////////////////////////////////

testTemplateForeachA: Template {
  list: List<of:Str>

  returns: List {
    Foreach <var:"list"> {
      Bind <var:"it">
    }
  }
}

testTemplateForeachB: Template {
  list: List<of:Str>

  returns: Dict {
    Foreach <var:"list"> {
      Dict { dis: Bind <var:"it"> }
    }
  }
}

testTemplateForeachC: Template {
  data: List<of:Str>

  returns: Dict {
    nestDict: Dict { Foreach <var:"data"> { Bind <var:"it"> } }
    nestList: List { Foreach <var:"data"> { Bind <var:"it"> } }
    nestGrid: Grid { Foreach <var:"data"> { Dict {dis:Bind <var:"it"> } } }
    Foreach <var:"data"> { Bind <var:"it"> }  // spread operator
  }
}

