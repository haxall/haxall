//
// Copyright (c) 2021, SkyFoundry LLC
// Licensed under the Academic Free License version 3.0
//
// History:
//   30 Dec 2021  Brian Frank  Creation
//

Overview
========
The following is summary of key classes:

- ConnLib: base class for connectors; implementations subclass this
- ConnRoster: maintains lookup tables and add/update/remove callbacks for conns and points
- Conn: final const class wrapper for connector recs; is actor for all messaging
- ConnPoint: final const class wrapper for point recs
- ConnMgr: mutable state and lifecycle logic within Conn actor (wraps ConnDispatch)
- ConnDispatch: base class for message handling; implementations subclass this
- ConnTrace: actor which stores circular buffer of trace debug messages
- ConnModel: quick access to implementation tag defs
- ConnService: lookup table for all libs, conns, and points (both old and new)

Threading and Concurrency
=========================
The framework utilizes a suite of const data structures which can be accessed
by any thread.  But these data structures are owned and mutated soley by one actor.

ConnRoster is responsible for the data structures used to index Conn and ConnPoint
instances.  It provides hashmaps to lookup conns and points by id and flattened
lists.  ConnRoster monitors the database for its conns and points using obsCommits.
These observation events are managed on the ConnLib actor itself.  We also
use the ConnRoster and ConnLib actor for the obsWatches and obsPointWrite eventing.

Each connector rec is mapped to a Conn instance which is itself an actor used
to manage all internal state.  ConnRoster strictly manages create/adds for the
conn/point mappings.  But all record updates and state changes are managed
with the Conn actor itself.  The roster will send the Conn actor messages for
connUpdated, pointAdded, pointUpdated, and pointRemoved.

The data structures for tuning recs are managed by ConnTuningRoster.  There
is only one instance of this class which is owned by ConnFwLib.  The tuning
roster monitors the database using obsCommits on the ConnFwLib actor.


