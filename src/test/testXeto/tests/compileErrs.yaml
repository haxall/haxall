#
# Tests for compiler errors
#


##########################################################################
## InheritSlots
##########################################################################

---
name: "cycle1"
compileLib: |
  Foo: Foo
verifyErrs: |
  Cyclic inheritance: temp::Foo
---
name: "cycle2"
compileLib: |
  Foo: Bar
  Bar: Foo
verifyErrs: |
  Cyclic inheritance: temp::Foo
  Cyclic inheritance: temp::Bar
---
name: "cycle3"
compileLib: |
  Foo: Bar
  Bar: Baz
  Baz: Foo
verifyErrs: |
  Cyclic inheritance: temp::Foo
  Cyclic inheritance: temp::Bar
  Cyclic inheritance: temp::Baz
---
name: "conflictSlots1"
compileLib: |
  Foo: {x:Str}
  Bar: {x:Date}
  Baz: Foo & Bar
verifyErrs: |
  Conflicing inherited slots: temp::Foo.x, temp::Bar.x
---
name: "enumInherit"
compileLib: |
  Foo: Enum <sealed> {
    a: Str
    b: Marker
  }
verifyErrs: |
  Enum types are implied sealed
  Enum item 'a' cannot have type
  Enum item 'b' cannot have type
---
name: "enumNoItems"
compileLib: |
  Foo: Enum {}
  Bar: Enum
verifyErrs: |
  Enum has no items
  Enum has no items
---
name: "enumInheritDupKeys"
compileLib: |
  Foo: Enum {
    a <key:"Alpha">
    b <key:"Alpha">
  }
verifyErrs: |
  Duplicate enum key: Alpha
---

##########################################################################
## Metas (InferData and CheckErrors)
##########################################################################

---
name: "reservedMeta"
compileLib: |
  Foo: Dict <id:"x", base:"x", type:"x", spec:"x", slots:"x", lib:"x", loc:"x", xetoFoo:"x">
verifyErrs: |
  Reserved spec meta tag 'id'
  Reserved spec meta tag 'base'
  Reserved spec meta tag 'type'
  Reserved spec meta tag 'spec'
  Reserved spec meta tag 'slots'
  Reserved spec meta tag 'lib'
  Reserved spec meta tag 'loc'
  Reserved spec meta tag 'xetoFoo'
---
name: "metaNotDefined"
compileLib: |
  Foo: Dict <foo> {
    a: Str <bar, qux:"xxx">
  }
  c: Date <baz>
verifyErrs: |
  Undefined meta tag 'foo'
  Undefined meta tag 'bar'
  Undefined meta tag 'qux'
  Undefined meta tag 'baz'
---
name: "xmetaNotDefined"
compileLib: |
  @xmeta-sys-Str: {
    foo
    bar: "xxx"
    base: "xxx"
    slots: "xxx"
  }
verifyErrs: |
  Undefined xmeta tag 'foo'
  Undefined xmeta tag 'bar'
  Reserved xmeta tag 'base'
  Reserved xmeta tag 'slots'
---
name: "metaDups"
compileLib: |
  abstract: Str <meta>
  base: Str <meta>
  instances: Str <meta>
  xetoFooBar: Marker <meta>
verifyErrs: |
  Duplicate meta specs: temp::abstract, sys::abstract
  Reserved meta tag 'base'
  Reserved meta tag 'instances'
  Reserved meta tag 'xetoFooBar'
---

##########################################################################
## CheckErrors
##########################################################################

---
name: "reservedInstanceNames"
compileLib: |
  @toc: {}
  @pragma: {}
  @doc-overview: {}
verifyErrs: |
  Instance name 'toc' is reserved
  Instance name 'pragma' is reserved
  Instance name 'doc-overview' is reserved
---
name: "reservedSpecNames"
compileLib: |
  toc: Dict
verifyErrs: |
  Spec name 'toc' is reserved
---
name: "dupTops"
compileLib: |
  foo: Dict
  Bar: Dict
  @foo: {}
  @Bar: {}
verifyErrs: |
  Spec 'foo' conflicts with instance of the same name
  Spec 'Bar' conflicts with instance of the same name
---
name: "checkTypeInherit"
compileLib: |
  /* test cases */
  A: Str
  B: And
  C: sys::Or
  D: Enum1
  E: Uri & Scalar
  F: Scalar & Enum2
  G: MyScalar & MyDict
  H: MyScalar | Dict
  I: MyScalar & List
  J: MyList & MyDict

  /* helper types */
  MyScalar: Scalar
  MyDict: Dict
  MyList: List<of:Str>
  Enum1: Enum { a, b }
  Enum2: Enum { a, b }
verifyErrs: |
  Cannot inherit from sealed type 'Str'
  Cannot directly inherit from compound type 'And'
  Cannot directly inherit from compound type 'Or'
  Cannot inherit from Enum type 'Enum1'
  Cannot inherit from sealed type 'Uri'
  Cannot inherit from Enum type 'Enum2'
  Cannot And scalar 'MyScalar' and dict 'MyDict'
  Cannot inherit from sealed type 'List'
  Cannot And scalar 'MyScalar' and list 'List'
  Cannot And dict 'MyDict' and list 'MyList'
  Cannot inherit from sealed type 'List'
---
name: "wrongInheritType"
compileLib: |
  Person: Dict
  Boss: Person
  Dog: Dict

  Foo: {
    x:Date
    y:Number
    a:List<of:Number>
    b:Ref<of:Person>
  }

  Bar: Foo {
    x:Str
    y:Int  // ok
    a:List<of:Obj>
    b:Ref<of:Dog>
  }

  Ok: Foo {
    a:List<of:Int>
    b:Ref<of:Boss>
  }
verifyErrs: |
  Slot 'x' type 'sys::Str' conflicts inherited slot 'temp::Foo.x' of type 'sys::Date'
  Slot 'a' of's type 'sys::Obj' conflicts inherited slot 'temp::Foo.a' of's type 'sys::Number'
  Slot 'b' of's type 'temp::Dog' conflicts inherited slot 'temp::Foo.b' of's type 'temp::Person'
---
name: "wrongGlobalType"
compileLib: |
  pragma: Lib <
      doc: "Test lib"
      version: "1.2.3"
      depends: { {lib:"sys"}, {lib:"ph"} }
    >
  a: Str
  b: Number
  c: Marker
  d: Date
  e: Dict
  f: List<of:Number>
  g: List<of:Number>
  Bar: {
    a
    b: Int // ok
    space: Str
    c: {}
    d: {foo}
    e: "wrong"
    f: List<of:Obj>
    g: List<of:Date>
  }
verifyErrs: |
  Slot 'a' type 'sys::Marker' conflicts global slot 'temp::a' of type 'sys::Str'
  Slot 'space' type 'sys::Str' conflicts global slot 'ph::space' of type 'sys::Marker'
  Scalar slot 'c' of type 'sys::Marker' cannot have slots
  Scalar slot 'd' of type 'sys::Date' cannot have slots
  Non-scalar slot 'e' of type 'sys::Dict' cannot have scalar value
  Slot 'f' of's type 'sys::Obj' conflicts global slot 'temp::f' of's type 'sys::Number'
  Slot 'g' of's type 'sys::Date' conflicts global slot 'temp::g' of's type 'sys::Number'
---
name: "dupGlobals"
compileLib: |
  pragma: Lib <
      doc: "Test lib"
      version: "1.2.3"
      depends: { {lib:"sys"}, {lib:"ph"} }
    >
  area: Str
  site: Str
  equip: Str <meta> // Ok
verifyErrs: |
  Duplicate global specs: temp::area, ph::area
  Duplicate global specs: temp::site, ph::site
---
name: "covariance"
compileLib: |
  Foo: {
    a: Number
    b: Number <minVal:10, maxVal: 20>
    c: Number <unit:"kW">
    d: Number <quantity:"energy">
  }

  Bad: Foo {
    a: Scalar
    b: Number <minVal:3, maxVal: 18>
    c: Number <unit:"W">
    d: Number <quantity:"power">
  }

  Ok: Foo {
    a: Duration
    b: Number <minVal:11, maxVal: 19>
    c: Number <unit:"kW">
    d: Number <quantity:"energy">
  }
verifyErrs: |
  Slot 'a' type 'sys::Scalar' conflicts inherited slot 'temp::Foo.a' of type 'sys::Number'
  Slot 'b' minVal '3.0' conflicts inherited slot 'temp::Foo.b' minVal '10.0'
  Slot 'b' maxVal '18.0' conflicts inherited slot 'temp::Foo.b' maxVal '20.0'
  Slot 'c' unit 'W' conflicts inherited slot 'temp::Foo.c' unit 'kW'
  Slot 'd' quantity 'power' conflicts inherited slot 'temp::Foo.d' quantity 'energy'
---
name: "numberChecksInstance"
compileLib: |
  Foo: {
    a: Number? <minVal:Number 10, maxVal:Number 20, quantity:"length">
    b: Number? <minVal:Number "-20kW", maxVal:Number "-10kW">
    c: Number? <maxVal:Number "100kW">
    d: Number? <unit:"kWh">
    e: Unit? <quantity: "power">
  }
  @ok1a: Foo { a:"10ft" }
  @ok2a: Foo { a:"15in" }
  @ok3a: Foo { a:"20m" }
  @ok1b: Foo { b:"-10kW" }
  @ok2b: Foo { b:"-20kW" }
  @ok3b: Foo { b:"-15kW" }
  @ok1d: Foo { d:"3kWh" }
  @ok1e: Foo { e:"kW" }

  @err1a: Foo { a:"21m" }
  @err2a: Foo { a:"0ft" }
  @err3a: Foo { a:"10" }
  @err4a: Foo { a:"10_count" }
  @err5a: Foo { a:"10kW" }

  @err1b: Foo { b:"-21kW" }
  @err2b: Foo { b:"-9kW" }
  @err3b: Foo { b:"-15W" }

  @err1c: Foo { c:"12" }
  @err2c: Foo { c:"12%" }

  @err1d: Foo { d:"3" }
  @err2d: Foo { d:"3%" }
  @err3d: Foo { d:"3Wh" }

  @err1e: Foo { e:"ft" }

verifyErrs: |
  Slot 'a': Number 21m > maxVal 20
  Slot 'a': Number 0ft < minVal 10
  Slot 'a': Number must be 'length' unit; no unit specified
  Slot 'a': Number must be 'length' unit; '_count' has no quantity
  Slot 'a': Number must be 'length' unit; 'kW' has quantity of 'power'
  Slot 'b': Number -21kW < minVal -20kW
  Slot 'b': Number -9kW > maxVal -10kW
  Slot 'b': Number -15W has invalid unit, minVal requires 'kW'
  Slot 'c': Number 12 has invalid unit, maxVal requires 'kW'
  Slot 'c': Number 12% has invalid unit, maxVal requires 'kW'
  Slot 'd': Number 3 must have unit of 'kWh'
  Slot 'd': Number 3% must have unit of 'kWh'
  Slot 'd': Number 3Wh must have unit of 'kWh'
  Slot 'e': Unit 'ft' must be 'power' not 'length'
---
name: "listChecks"
compileLib: |
  A: List {
    a: Str
   }
  B: A & Scalar
  C: Foo & A
  Foo: Dict
  @x: Dict {
    list: List { a:"x" }
  }
verifyErrs: |
  Cannot inherit from sealed type 'List'
  List specs cannot define slots
  Cannot And scalar 'Scalar' and list 'A'
  Cannot And dict 'Foo' and list 'A'
  List cannot contain named items
---
name: "enumInherit"
compileLib: |
  X: Enum {
    a <key:"dup">
    b <key:"b">
    c <key:"dup">
  }
verifyErrs: |
  Duplicate enum key: dup
---
name: "enumChecks"
compileLib: |
  A: Enum { foo }
  B: A { bar  }
verifyErrs: |
  Cannot inherit from Enum type 'A'
---
name: "enumInstances"
compileLib: |
  Color: Enum { red, blue }
  State: Enum {
    va <key:"VA">
    tx <key:"TX">
  }
  Car: {
    color: Color?
    st: State?
  }

  @a: { color: Color "bad1" }
  @b: Car { color: "bad2" }

  @c: { st: State "tx" }
  @d: Car { st: "va" }

  @e: Car { color:"blue", st: "TX", ok }
verifyErrs: |
  Invalid key 'bad1' for enum type 'temp::Color'
  Slot 'color': Invalid key 'bad2' for enum type 'temp::Color'
  Invalid key 'tx' for enum type 'temp::State'
  Slot 'st': Invalid key 'va' for enum type 'temp::State'
---
name: "choiceChecks"
compileLib: |
  A: Choice { a: Str }
  B: A { b }
  C: A { c1, c2:Number }
verifyErrs: |
  Choice slot 'a' must be marker type
  Choice slot 'c2' must be marker type
---
name: "choiceInstances"
compileLib: |
  Color: Choice
  Red: Color { red }
  Blue: Color { blue }
  Green: Color { green }

  Car: { color: Color }

  @a: Car {}
  @b: Car {red}
  @c: Car {red,blue}
verifyErrs: |
  Slot 'color': Missing required choice 'temp::Color'
  Slot 'color': Conflicting choice 'temp::Color': Red, Blue
---
name: "finalVal"
compileLib: |
  Foo: {
    a: Str "A"
    b: Str "B"
    c: Str <fixed> "C"
  }

  Bar: Foo {
    b: Str <fixed> "Boo"
  }

  Baz: Foo {
    c: Str "no way"
  }

  @ok: Foo { a:"alpha", b:"beta", c:"C" }
  @errC: Foo { a:"alpha", b:"beta", c:"charlie" }
  @errB: Bar { a:"alpha", b:"beta", c:"C" }
verifyErrs: |
  Slot 'c' is fixed and cannot declare new default value
  Slot 'c': Must have fixed value 'C'
  Slot 'b': Must have fixed value 'Boo'
---
name: "fieldMethodOverride"
compileLib: |
  A: Interface {
    x: Func { returns: Number }
    y: Func { returns: Number }
  }
  B: A {
    x: Int
    y: Date
  }
verifyErrs: |
  Type mismatch in field 'y' override of method: sys::Date != sys::Number

